import asyncio
import re
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.default import DefaultBotProperties

from data import db

TOKEN = "8114460368:AAGxYdqomBzMfS-VgS3_bJHsaHK1srssoe8"
ADMINS = {764515145}  # –ë–∞—Å—Ç–∞–ø“õ—ã –∞–¥–º–∏–Ω–¥–µ—Ä

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

class SendState(StatesGroup):
    waiting_for_text = State()

@router.message()
async def message_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or "None"

    # /start
    if message.text == "/start":
        await db.add_user(user_id, username)
        await message.answer("–ë–∞–≥–∞ —Å–≤—è–∑—å! –ö–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑! –ê—Å—Ç—ã–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–∞–∑—ã“£—ã–∑!")
        return

    # /admin
    if message.text == "/admin" and user_id in ADMINS:
        await message.answer(
            "üìã –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n"
            "1. /send - –†–∞—Å—Å—ã–ª–∫–∞\n"
            "2. /users - “ö–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã\n"
            "3. /addadmin @username - –ê–¥–º–∏–Ω “õ–æ—Å—É"
        )
        return

    # /users
    if message.text == "/users" and user_id in ADMINS:
        count = await db.count_users()
        await message.answer(f"üìã –ñ–∞–ª–ø—ã “õ–æ–ª–¥–∞–Ω—É—à—ã–ª–∞—Ä —Å–∞–Ω—ã: {count}")
        return

    # /addadmin @username
    if message.text.startswith("/addadmin") and user_id in ADMINS:
        try:
            username_arg = message.text.split("@")[1].strip()
            new_admin_id = await db.get_user_id_by_username(username_arg)
            if new_admin_id:
                ADMINS.add(new_admin_id)
                await message.answer(f"‚úÖ @{username_arg} –∞–¥–º–∏–Ω —Ä–µ—Ç—ñ–Ω–¥–µ “õ–æ—Å—ã–ª–¥—ã!")
                await bot.send_message(new_admin_id, "üéâ –°—ñ–∑–≥–µ –∞–¥–º–∏–Ω “õ“±“õ—ã“õ –±–µ—Ä—ñ–ª–¥—ñ!")
            else:
                await message.answer("‚ùå –ë“±–ª –∞–¥–∞–º –±–æ—Ç—Ç—ã –ø–∞–π–¥–∞–ª–∞–Ω–±–∞“ì–∞–Ω.")
        except:
            await message.answer("‚ùå “ö–∞—Ç–µ! –§–æ—Ä–º–∞—Ç: /addadmin @username")
        return

    # /send
    if message.text == "/send" and user_id in ADMINS:
        await state.set_state(SendState.waiting_for_text)
        await message.answer("‚úçÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –º”ô—Ç—ñ–Ω—ñ–Ω –∂–∞–∑—ã“£—ã–∑:")
        return

    # Admin reply
    if user_id in ADMINS and message.reply_to_message:
        try:
            reply_text = message.reply_to_message.text
            match = re.search(r"ID:\s*([0-9]+)", reply_text)
            if not match:
                await message.answer("‚ùå ID —Ç–∞–±—ã–ª–º–∞–¥—ã.")
                return
            reply_user_id = int(match.group(1))

            user_msg_line = [line for line in reply_text.split('\n') if "‚úâÔ∏è:" in line]
            user_msg = user_msg_line[0].replace("‚úâÔ∏è:", "").strip() if user_msg_line else "(–∂–æ“õ)"

            await bot.send_message(
                reply_user_id,
                f"üì¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:</b>\n"
                f"<b>–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞“ì—ã“£—ã–∑:</b> {user_msg}\n"
                f"<b>–ñ–∞—É–∞–ø:</b> {message.text}\n\n"
                f"üó∫Ô∏è –°–ø–∞–≤–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!"
            )
            await message.answer("‚úÖ –ñ–∞—É–∞–ø –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
        except Exception as e:
            await message.answer(f"‚ùå “ö–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ –∂—ñ–±–µ—Ä–µ –∞–ª–º–∞–¥—ã–º.\n\n“ö–∞—Ç–µ: {e}")
        return

    # Admin —Ä–∞—Å—Å—ã–ª–∫–∞ –º”ô—Ç—ñ–Ω—ñ
    if await state.get_state() == SendState.waiting_for_text.state and user_id in ADMINS:
        await state.clear()
        text = message.text
        users = await db.get_all_users()
        success, fail = 0, 0
        for user_id in users:
            try:
                await bot.send_message(user_id, f" –†–µ–∫–ª–∞–º–∞ –æ—Ç –∞–¥–º–∏–Ω–∞\n{text}")
                success += 1
                await asyncio.sleep(0.1)
            except:
                fail += 1
        await message.answer(f"‚úÖ –ñ—ñ–±–µ—Ä—ñ–ª–¥—ñ: {success} üü• “ö–∞—Ç–µ: {fail}")
        return

    # “ö–æ–ª–¥–∞–Ω—É—à—ã —Ö–∞–±–∞—Ä–ª–∞–º–∞—Å—ã (–∞–¥–º–∏–Ω –µ–º–µ—Å)
    if user_id not in ADMINS:
        await db.add_user(user_id, username)
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ—Ç–≤–µ—á–∞—é –Ω–µ–¥–æ–ª–≥–æ –≤—Ä–µ–º—è!")

        forward_text = (
            f"üñë –ñ–∞“£–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞!\n"
            f"üë§ –û—Ç: @{username}\n"
            f"üîñ ID: {user_id}\n"
            f"‚úâÔ∏è: {message.text}\n"
            f"\nüó∫Ô∏è –°–ø–∞–≤–Ω–∏—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!"
        )
        for admin_id in ADMINS:
            await bot.send_message(admin_id, forward_text)


async def main():
    await db.setup()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
